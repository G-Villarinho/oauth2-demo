// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// JWTServiceMock is an autogenerated mock type for the JWTService type
type JWTServiceMock struct {
	mock.Mock
}

type JWTServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *JWTServiceMock) EXPECT() *JWTServiceMock_Expecter {
	return &JWTServiceMock_Expecter{mock: &_m.Mock}
}

// GenerateAccessTokenJWT provides a mock function with given fields: ctx, firstName, lastName, email, userID, expiresAt
func (_m *JWTServiceMock) GenerateAccessTokenJWT(ctx context.Context, firstName string, lastName string, email string, userID string, expiresAt time.Time) (string, error) {
	ret := _m.Called(ctx, firstName, lastName, email, userID, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessTokenJWT")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, time.Time) (string, error)); ok {
		return rf(ctx, firstName, lastName, email, userID, expiresAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, time.Time) string); ok {
		r0 = rf(ctx, firstName, lastName, email, userID, expiresAt)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, time.Time) error); ok {
		r1 = rf(ctx, firstName, lastName, email, userID, expiresAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JWTServiceMock_GenerateAccessTokenJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAccessTokenJWT'
type JWTServiceMock_GenerateAccessTokenJWT_Call struct {
	*mock.Call
}

// GenerateAccessTokenJWT is a helper method to define mock.On call
//   - ctx context.Context
//   - firstName string
//   - lastName string
//   - email string
//   - userID string
//   - expiresAt time.Time
func (_e *JWTServiceMock_Expecter) GenerateAccessTokenJWT(ctx interface{}, firstName interface{}, lastName interface{}, email interface{}, userID interface{}, expiresAt interface{}) *JWTServiceMock_GenerateAccessTokenJWT_Call {
	return &JWTServiceMock_GenerateAccessTokenJWT_Call{Call: _e.mock.On("GenerateAccessTokenJWT", ctx, firstName, lastName, email, userID, expiresAt)}
}

func (_c *JWTServiceMock_GenerateAccessTokenJWT_Call) Run(run func(ctx context.Context, firstName string, lastName string, email string, userID string, expiresAt time.Time)) *JWTServiceMock_GenerateAccessTokenJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(time.Time))
	})
	return _c
}

func (_c *JWTServiceMock_GenerateAccessTokenJWT_Call) Return(_a0 string, _a1 error) *JWTServiceMock_GenerateAccessTokenJWT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JWTServiceMock_GenerateAccessTokenJWT_Call) RunAndReturn(run func(context.Context, string, string, string, string, time.Time) (string, error)) *JWTServiceMock_GenerateAccessTokenJWT_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateOTPTokenJWT provides a mock function with given fields: ctx, jti, expiresAt
func (_m *JWTServiceMock) GenerateOTPTokenJWT(ctx context.Context, jti string, expiresAt time.Time) (string, error) {
	ret := _m.Called(ctx, jti, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for GenerateOTPTokenJWT")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) (string, error)); ok {
		return rf(ctx, jti, expiresAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) string); ok {
		r0 = rf(ctx, jti, expiresAt)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, jti, expiresAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JWTServiceMock_GenerateOTPTokenJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateOTPTokenJWT'
type JWTServiceMock_GenerateOTPTokenJWT_Call struct {
	*mock.Call
}

// GenerateOTPTokenJWT is a helper method to define mock.On call
//   - ctx context.Context
//   - jti string
//   - expiresAt time.Time
func (_e *JWTServiceMock_Expecter) GenerateOTPTokenJWT(ctx interface{}, jti interface{}, expiresAt interface{}) *JWTServiceMock_GenerateOTPTokenJWT_Call {
	return &JWTServiceMock_GenerateOTPTokenJWT_Call{Call: _e.mock.On("GenerateOTPTokenJWT", ctx, jti, expiresAt)}
}

func (_c *JWTServiceMock_GenerateOTPTokenJWT_Call) Run(run func(ctx context.Context, jti string, expiresAt time.Time)) *JWTServiceMock_GenerateOTPTokenJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *JWTServiceMock_GenerateOTPTokenJWT_Call) Return(_a0 string, _a1 error) *JWTServiceMock_GenerateOTPTokenJWT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JWTServiceMock_GenerateOTPTokenJWT_Call) RunAndReturn(run func(context.Context, string, time.Time) (string, error)) *JWTServiceMock_GenerateOTPTokenJWT_Call {
	_c.Call.Return(run)
	return _c
}

// NewJWTServiceMock creates a new instance of JWTServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTServiceMock {
	mock := &JWTServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
