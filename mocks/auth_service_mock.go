// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/aetheris-lab/aetheris-id/api/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// AuthServiceMock is an autogenerated mock type for the AuthService type
type AuthServiceMock struct {
	mock.Mock
}

type AuthServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthServiceMock) EXPECT() *AuthServiceMock_Expecter {
	return &AuthServiceMock_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: ctx, code, otpID
func (_m *AuthServiceMock) Authenticate(ctx context.Context, code string, otpID string) (*models.AuthenticateResponse, error) {
	ret := _m.Called(ctx, code, otpID)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *models.AuthenticateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.AuthenticateResponse, error)); ok {
		return rf(ctx, code, otpID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.AuthenticateResponse); ok {
		r0 = rf(ctx, code, otpID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AuthenticateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, code, otpID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceMock_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type AuthServiceMock_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - otpID string
func (_e *AuthServiceMock_Expecter) Authenticate(ctx interface{}, code interface{}, otpID interface{}) *AuthServiceMock_Authenticate_Call {
	return &AuthServiceMock_Authenticate_Call{Call: _e.mock.On("Authenticate", ctx, code, otpID)}
}

func (_c *AuthServiceMock_Authenticate_Call) Run(run func(ctx context.Context, code string, otpID string)) *AuthServiceMock_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AuthServiceMock_Authenticate_Call) Return(_a0 *models.AuthenticateResponse, _a1 error) *AuthServiceMock_Authenticate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceMock_Authenticate_Call) RunAndReturn(run func(context.Context, string, string) (*models.AuthenticateResponse, error)) *AuthServiceMock_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// SendVerificationCode provides a mock function with given fields: ctx, email
func (_m *AuthServiceMock) SendVerificationCode(ctx context.Context, email string) (*models.SendVerificationCodeResponse, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for SendVerificationCode")
	}

	var r0 *models.SendVerificationCodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.SendVerificationCodeResponse, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.SendVerificationCodeResponse); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SendVerificationCodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceMock_SendVerificationCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendVerificationCode'
type AuthServiceMock_SendVerificationCode_Call struct {
	*mock.Call
}

// SendVerificationCode is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *AuthServiceMock_Expecter) SendVerificationCode(ctx interface{}, email interface{}) *AuthServiceMock_SendVerificationCode_Call {
	return &AuthServiceMock_SendVerificationCode_Call{Call: _e.mock.On("SendVerificationCode", ctx, email)}
}

func (_c *AuthServiceMock_SendVerificationCode_Call) Run(run func(ctx context.Context, email string)) *AuthServiceMock_SendVerificationCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthServiceMock_SendVerificationCode_Call) Return(_a0 *models.SendVerificationCodeResponse, _a1 error) *AuthServiceMock_SendVerificationCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceMock_SendVerificationCode_Call) RunAndReturn(run func(context.Context, string) (*models.SendVerificationCodeResponse, error)) *AuthServiceMock_SendVerificationCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthServiceMock creates a new instance of AuthServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthServiceMock {
	mock := &AuthServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
